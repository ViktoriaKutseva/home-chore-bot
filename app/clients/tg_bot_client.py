from datetime import timedelta, timezone, time, datetime

from loguru import logger
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import BotCommand, Update, InlineKeyboardButton, InlineKeyboardMarkup

from clients.db_client import  Chore, Person, DBClient, TaskSent, PreviousAssignment
from enums.complexity import Complexity
from enums.frequency import Frequency
from logic.assing_by_date import ChoreDistributionService
import random
import string


def add_default_chores(db_client: DBClient):
    chores = [
        Chore(name="–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä", frequency=Frequency.EVERY_3_DAYS, complexity=Complexity.MEDIUM),
        Chore(name="–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã –∫–æ—à–∫–∞–º", frequency=Frequency.DAILY, complexity=Complexity.EASY),
        Chore(name="–£–±—Ä–∞—Ç—å –ª–æ—Ç–∫–∏", frequency=Frequency.DAILY, complexity=Complexity.MEDIUM),
        Chore(name="–°–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ", frequency=Frequency.WEEKLY, complexity=Complexity.HARD),
        Chore(name="–ü–æ–º—ã—Ç—å —Ä–æ–±–æ—Å–æ—Å–∞", frequency=Frequency.WEEKLY, complexity=Complexity.HARDEST),
        Chore(name="–ü–æ–º—ã—Ç—å —Å—Ç–µ–∫–ª–∞", frequency=Frequency.EVERY_2_MONTHS, complexity=Complexity.HARDEST),
        Chore(name="–ü–æ–º—ã—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", frequency=Frequency.WEEKLY, complexity=Complexity.HARDEST),
        Chore(name="–ü–æ–º—ã—Ç—å –¥—É—à", frequency=Frequency.WEEKLY, complexity=Complexity.HARD),
        Chore(name="–ü–æ–º—ã—Ç—å —É–Ω–∏—Ç–∞–∑", frequency=Frequency.WEEKLY, complexity=Complexity.EASY),
        Chore(name="–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –Ω–∞ –∫—É—Ö–Ω–µ", frequency=Frequency.EVERY_3_DAYS, complexity=Complexity.MEDIUM),
        Chore(name="–ü–æ—Å—Ç–∏—Ä–∞—Ç—å –≤–µ—â–∏", frequency=Frequency.EVERY_3_DAYS, complexity=Complexity.MEDIUM),
        Chore(name="–°–æ–±—Ä–∞—Ç—å –º—É—Å–æ—Ä", frequency=Frequency.DAILY, complexity=Complexity.EASY),
        Chore(name="–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É", frequency=Frequency.DAILY, complexity=Complexity.MEDIUM), 
        Chore(name="–ü–æ–º—ã—Ç—å —Ä–∞–∫–æ–≤–∏–Ω—É", frequency=Frequency.DAILY, complexity=Complexity.EASY)

    ]   
    for chore in chores:
            if not db_client.get_chore(chore.name):  # Check if chore exists
                db_client.add_chore(chore)

class TgBotClient:
    def __init__(self, token: str, db_url: str):
        logger.info("Initializing bot client")
        self.db_client = DBClient(db_url)
        add_default_chores(self.db_client)
        self.chore_service = ChoreDistributionService()

        self._bot: Application = (
            Application.builder()
            .token(token)
            .post_init(self.post_init)
            .build()
        )
        self._set_commands(self._bot)  
        self._set_job_queue(self._bot)

        
    def _set_commands(self, application: Application) -> None:

        logger.info("Setting standalone commands...")
        
        application.add_handler(CommandHandler("add_chore", self.create_chore_command))
        application.add_handler(CommandHandler("invite", self.invite_command))
        application.add_handler(CommandHandler("start", self.start_command))
        
    async def post_init(self, application: Application) -> None:
        await application.bot.set_my_commands([
            BotCommand("add_chore", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
            BotCommand("invite", "–¥–æ–±–≤–ª–µ–Ω–∏–µ —á–µ–ª–∏–∫–∞"),
            BotCommand("start", "–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")
        ])
        
        chat_id = "624165496"

        try:
            await application.bot.send_message(chat_id=chat_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("Startup message sent successfully.")
        except Exception as e:
            logger.error(f"Failed to send startup message: {e}")
       
    async def create_chore_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Method create chore"""
        logger.info('Start creating chore')

        if not context.args or len(context.args) < 3:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_chore <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å–ª–æ–∂–Ω–æ—Å—Ç—å> <—á–∞—Å—Ç–æ—Ç–∞>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /add_chore –ú—ã—Ç—å_–ø–æ—Å—É–¥—É 2 7"
            )
            return

        try:
            name = context.args[0]
            complexity = Complexity(int(context.args[1]))
            frequency = Frequency(int(context.args[2]))

            chore = Chore(name=name, complexity=complexity, frequency=frequency)
            self.db_client.add_chore(chore)

            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            logger.info(f"Chore '{name}' added successfully.")

        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —á–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
        except Exception as e:
            logger.error(f"Error adding chore: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

    async def invite_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        invite_code = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
        
        invite_link = f"https://t.me/{context.bot.username}?start=addme_{invite_code}"

        await update.message.reply_text(
            f"üöÄ –û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É: {invite_link}\n"
            "–ö–æ–≥–¥–∞ –æ–Ω –Ω–∞–∂–º—ë—Ç, –±–æ—Ç –µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç!"
        )

        logger.info(f"Generated invite link for {user.id}: {invite_link}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user

        if context.args and context.args[0].startswith("addme_"):
            invite_code = context.args[0][6:]  
            logger.info(f"User {user.id} joined with invite code: {invite_code}")

        session = self.db_client._sessionmaker()
        existing_person = session.query(Person).filter_by(tg_user_id=user.id).first()
        session.close()

        if existing_person:
            await update.message.reply_text(f"–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, @{user.username}! üòâ")
        else:
            person = Person(tg_user_id=user.id)
            self.db_client.add_person(person)
            await update.message.reply_text(f"‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, @{user.username}!")

            logger.info(f"User {user.id} added to database.")
        
    def _set_job_queue(self, application: Application) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞."""
        logger.info("Setting job queue...")
        if not application.job_queue:
            logger.error("Job queue not found in bot. Exiting.")
            return

        application.job_queue.run_repeating(
            callback=self._check_and_send_tasks, 
            interval=timedelta(hours=2),
            first=time(hour=0, minute=0, tzinfo=timezone.utc),
            name="check_and_send_tasks"
        )
        
        application.job_queue.run_daily(    
            callback=self._clear_sent_tasks_job,
            time=time(hour=0, minute=0, tzinfo=timezone.utc),
            name="clear_sent_tasks"
        )   
        
            
    async def _check_and_send_tasks(self, context: ContextTypes.DEFAULT_TYPE):
        logger.info("Checking if the tasks has been sent today")

        session = self.db_client._sessionmaker()
        last_sent = session.query(TaskSent).order_by(TaskSent.created_at.desc()).first()
        session.close()

        today = datetime.now(timezone.utc).date()

        if last_sent and last_sent.created_at.date() == today:
            logger.info("Tasks has been sent today, no need to resend")
        else:
            logger.info("Task has not been sent today, start sending tasks.")
            await self._notify_chores_daily(context)

            session = self.db_client._sessionmaker()
            session.add(TaskSent(created_at=today))
            session.commit()
            session.close()

    async def _notify_chores_daily(self, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Ö –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."""
        logger.info("Sending today's tasks")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é DBClient
        session = self.db_client._sessionmaker()

        try:
            persons = session.query(Person).all()
            all_chores = session.query(Chore).all()

            if not persons or not all_chores:
                logger.warning("No users or tasks to send.")
                return

            today_chores = self.chore_service.get_chores_due_today(all_chores)

            if not today_chores:
                logger.info("No tasks today.")
                return

            tasks_by_person = self.chore_service.assign_tasks(today_chores, persons, db_session=session)

            today = datetime.now(timezone.utc).date()

            for entry in tasks_by_person:
                person = entry["person"]
                tasks = entry["tasks"]

                # üíå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏
                try:
                    chat = await context.bot.get_chat(person.tg_user_id)
                    user_display_name = f"@{chat.username}" if chat.username else chat.first_name
                except Exception as e:
                    logger.error(f"Couldn't get user name {person.tg_user_id}: {e}")
                    user_display_name = f"ID {person.tg_user_id}"

                # üìã –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if tasks:
                    task_list = "\n".join([f"- {task['name']} (–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task['complexity']})" for task in tasks])
                    message = f"üëã {user_display_name}, –≤–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{task_list}"
                else:
                    message = f"üéâ {user_display_name}, —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á!"

                # üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                try:
                    await context.bot.send_message(chat_id=person.tg_user_id, text=message)
                    logger.info(f"Tasks have been sent to {user_display_name}")
                except Exception as e:
                    logger.error(f"Couldn't send tasks to {person.tg_user_id}: {e}")

                # üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                for task in tasks:
                    chore = next((c for c in all_chores if c.name == task["name"]), None)
                    if chore:
                        history = PreviousAssignment(
                            person_id=person.id,
                            chore_id=chore.id,
                            date=today
                        )
                        session.add(history)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()

        except Exception as e:
            logger.error(f"An error occurred: {e}")
        finally:
            session.close()

    async def _clear_sent_tasks_job(self, context: ContextTypes.DEFAULT_TYPE):
        logger.info("Clearing table sent_tasks...")
        self.db_client.clear_sent_tasks()

    def clear_sent_tasks(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã TaskSent."""
        logger.info("Clearing table sent_tasks...")
        session = self._sessionmaker()
        try:
            session.query(TaskSent).delete()
            session.commit()
            logger.info("Table sent_tasks now empty.")
        except Exception as e:
            session.rollback()
            logger.error(f"Error clearing sent_tasks: {e}")
        finally:
            session.close()

    def run(self):
        logger.info("Starting bot")
        self._bot.run_polling()

# # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤ –æ–±—â–µ–º —á–∞—Ç–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á
